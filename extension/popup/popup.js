!function(){"use strict";const e={actualMode:"autocomplete"},t=["logs","title","cursor","typing","mouseover","infinite","timeout","history","includeImages"],o=document.querySelector("#mode").querySelectorAll("button"),n=["includeImages"],r={autocomplete:[],clipboard:["typing","mouseover"],"question-to-answer":["typing","infinite","mouseover"]};function s(){const o=r[e.actualMode],s=t.filter((e=>!o.includes(e)&&!n.includes(e)));for(const e of o)document.querySelector("#"+e).parentElement.style.display="none";for(const e of s)document.querySelector("#"+e).parentElement.style.display=""}for(const t of o)t.addEventListener("click",(function(){const n=t.value;e.actualMode=n;for(const e of o)e.value!==n?e.classList.add("not-selected"):e.classList.remove("not-selected");s()}));const c="1.1.5",i=document.querySelector("#version");function a(e,t=!0){if(t)return void(i.textContent="v"+e);const o=document.createElement("a");o.href="https://github.com/yoannchb-pro/MoodleGPT",o.rel="noopener noreferrer",o.target="_blank",o.textContent="v"+e,i.appendChild(o),i.appendChild(document.createTextNode(" is now available !"))}!async function(){const e=await async function(){const e=await fetch("https://raw.githubusercontent.com/yoannchb-pro/MoodleGPT/main/package.json");return(await e.json()).version}().catch((e=>(console.error(e),c))),t=e.split("."),o=c.split("."),n=Math.min(t.length,o.length);for(let r=0;r<n;++r){if(parseInt(t[r])>parseInt(o[r]))return a(e,!1);if(parseInt(o[r])>parseInt(t[r]))return a(c)}a(c)}();const l=document.querySelector("#settings"),d=document.querySelector("#advanced-settings"),u=document.querySelector("#switch-settings");function m({msg:e,isError:t,isInfinite:o}){const n=document.querySelector("#message");n.style.color=t?"red":"limegreen",n.textContent=e,n.style.display="block",o||setTimeout((()=>n.style.display="none"),5e3)}u.addEventListener("click",(function(e){e.preventDefault(),"flex"===d.style.display?(l.style.display="flex",d.style.display="none",u.textContent="Advanced settings"):(l.style.display="none",d.style.display="flex",u.textContent="Go back to settings")}));const y=document.querySelector("#apiKey"),f=document.querySelector("#model"),p=document.querySelector("#baseURL");if(!y||!f||!p)throw new Error("Required inputs not found in DOM");async function g(){const e=f.value.trim(),t=y.value.trim(),o=p.value.trim()||"https://api-inference.huggingface.co/models";if(e)if(t)try{m({msg:"Checking model...",isInfinite:!0,isError:!1});const n=await fetch(`${o}/${e}`,{method:"POST",headers:{Authorization:`Bearer ${t}`,"Content-Type":"application/json"},body:JSON.stringify({inputs:"ping"})});if(!n.ok)throw new Error(await n.text());m({msg:`The model "${e}" is valid!`})}catch(e){console.error(e),m({msg:`Error: ${e.message}`,isError:!0})}else m({msg:"Please enter a Hugging Face API key",isError:!0});else m({msg:"Please enter a model name",isError:!0})}const h=document.querySelector("#check-model");h&&h.addEventListener("click",g);const v=document.querySelector(".save");if(!v)throw new Error("Save button not found");const E=["apiKey","code","model","baseURL","maxTokens"];v.addEventListener("click",(()=>{const o=E.map((e=>{const t=document.querySelector("#"+e);if(!t)throw new Error(`Input #${e} not found`);return t.value.trim()})),[n,r,s,c,i]=o,a=t.map((e=>{const t=document.querySelector("#"+e);if(!t)throw new Error(`Checkbox #${e} not found`);return t.checked&&"none"!==t.parentElement?.style.display})),[l,d,u,y,f,p,g,h,v]=a;n&&s?r.length>0&&r.length<2?m({msg:"The code should at least contain 2 characters",isError:!0}):(chrome.storage.sync.set({moodleGPT:{apiKey:n,code:r,model:s,baseURL:c,maxTokens:i?parseInt(i):void 0,logs:l,title:d,cursor:u,typing:y,mouseover:f,infinite:p,timeout:g,history:h,includeImages:v,mode:e.actualMode}}),m({msg:"Configuration saved"})):m({msg:"Please complete all the form",isError:!0})})),chrome.storage.sync.get(["moodleGPT"]).then((n=>{const r=n.moodleGPT;r&&(r.mode&&(e.actualMode=r.mode,o.forEach((e=>{e.value===r.mode?e.classList.remove("not-selected"):e.classList.add("not-selected")}))),E.forEach((e=>{const t=document.querySelector("#"+e);t&&r[e]&&(t.value=r[e])})),t.forEach((e=>{const t=document.querySelector("#"+e);t&&(t.checked=r[e]||!1)})),s(),function(){const e=document.querySelector("#includeImages");e&&(e.disabled=!1)}(),g())}))}();
//# sourceMappingURL=popup.js.map
